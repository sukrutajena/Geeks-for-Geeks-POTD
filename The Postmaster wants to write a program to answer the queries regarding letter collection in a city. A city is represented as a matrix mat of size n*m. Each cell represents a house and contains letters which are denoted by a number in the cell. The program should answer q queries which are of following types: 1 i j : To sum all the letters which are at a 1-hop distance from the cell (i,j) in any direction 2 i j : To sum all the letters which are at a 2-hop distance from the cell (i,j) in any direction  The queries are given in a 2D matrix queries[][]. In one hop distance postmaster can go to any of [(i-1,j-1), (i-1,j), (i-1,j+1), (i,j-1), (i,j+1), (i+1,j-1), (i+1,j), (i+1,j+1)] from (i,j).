The Postmaster wants to write a program to answer the queries regarding letter collection in a city. A city is represented as a matrix mat of size n*m.
Each cell represents a house and contains letters which are denoted by a number in the cell. The program should answer q queries which are of following types:
1 i j : To sum all the letters which are at a 1-hop distance from the cell (i,j) in any direction
2 i j : To sum all the letters which are at a 2-hop distance from the cell (i,j) in any direction 
The queries are given in a 2D matrix queries[][].
In one hop distance postmaster can go to any of [(i-1,j-1), (i-1,j), (i-1,j+1), (i,j-1), (i,j+1), (i+1,j-1), (i+1,j), (i+1,j+1)] from (i,j). 




=======================================================================================================================================================




class Solution{
    static List<Integer> matrixSum(int n, int m, int mat[][], int q, int queries[][])
    {
        // code here
        
       List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < q; i++) {
            int col = queries[i][2];
            int row = queries[i][1];
            int val = queries[i][0];
            int sum = 0;
            int cs = col - val, rs = row - val + 1, re = row + val, ce = col + val;
            for (int j = cs; j <= ce && j < m; j++) {
                if (row - val >= 0 && j < m && j >= 0) {
                    sum += mat[row - val][j];
                }
                if (row + val < n && j < m && j >= 0) {
                    sum += mat[row + val][j];
                }
            }
            for (int j = rs; j < re && j < n; j++) {
                if (col - val >= 0 && j < n && j >= 0) {
                    sum += mat[j][col - val];
                }
                if (col + val < m && j < n && j >= 0) {
                    sum += mat[j][col + val];
                }
            }
            ans.add(sum);
        }
        return ans; 
}
}
