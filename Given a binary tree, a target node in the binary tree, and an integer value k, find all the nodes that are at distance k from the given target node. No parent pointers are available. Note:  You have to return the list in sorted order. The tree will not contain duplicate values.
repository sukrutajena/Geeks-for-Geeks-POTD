Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.
Note:

You have to return the list in sorted order.
The tree will not contain duplicate values.



========================================================================================================================================================================





class Solution
{
    public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        // return the sorted list of all nodes at k dist
        Node key = findKey(root, target);
        HashMap<Node, Node> map = new HashMap<>();
        parentNode(root, map, target);
        return findKDist(map, new HashMap<>(), root, key, k);
    }
    
    private static void parentNode(Node root, HashMap<Node, Node> map, int target){
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr.left != null){
                map.put(curr.left, curr);
                q.offer(curr.left);
            }
            if(curr.right != null){
                map.put(curr.right, curr);
                q.offer(curr.right);
            }
        }
    }
    
    private static ArrayList<Integer> findKDist(HashMap<Node, Node> map, HashMap<Node, Boolean> map2, Node root, Node key, int k){
        Queue<Node> q = new LinkedList<>();
        q.offer(key);
        map2.put(key, true);
        int level = 0;
        while(!q.isEmpty()){
            if(level == k) break;
            level++;
            int size = q.size();
            for(int i = 0; i < size; i++){
                Node curr = q.poll();
                if(curr.left != null && map2.get(curr.left) == null){
                    q.offer(curr.left);
                    map2.put(curr.left, true);
                }
                if(curr.right != null && map2.get(curr.right) == null){
                    q.offer(curr.right);
                    map2.put(curr.right, true);
                }
                if(map.get(curr) != null && map2.get(map.get(curr)) == null){
                    q.offer(map.get(curr));
                    map2.put(map.get(curr), true);
                }
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while(!q.isEmpty()){
            ans.add(q.poll().data);
        }
        Collections.sort(ans);
        return ans;
    }
    
    private static Node findKey(Node root, int target){
        if(root == null) return null;
        if(root.data == target) return root;
        Node left = findKey(root.left, target);
        Node right = findKey(root.right, target);
        if(right == null) return left;
        return right;
    }
};
