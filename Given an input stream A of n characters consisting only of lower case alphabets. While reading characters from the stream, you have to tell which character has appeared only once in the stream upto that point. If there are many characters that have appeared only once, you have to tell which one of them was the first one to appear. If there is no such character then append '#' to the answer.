Given an input stream A of n characters consisting only of lower case alphabets. While reading characters 
from the stream, you have to tell which character has appeared only once in the stream upto that point. If 
there are many characters that have appeared only once, you have to tell which one of them was the first one 
to appear. If there is no such character then append '#' to the answer.
 
======================================================================================
class Solution
{
    public String FirstNonRepeating(String A)
    {
        // code here
         HashMap<Character,Integer> map = new HashMap<>();
       
       List<Character> que = new ArrayList<>();
       int n = 0;
       StringBuilder sb = new StringBuilder();
       for(int i = 0 ; i < A.length() ; i++){
           char ch = A.charAt(i);
           
           if(map.containsKey(ch)){
            map.put(ch,-1);
           }
           else{
               map.put(ch,que.size());
               que.add(ch);
           }
           
           if(que.size() == 0) sb.append('#');
           else {
             
               while(n < que.size() && (int)map.get(que.get(n)) == -1) n++;
               if(n < que.size()) sb.append(que.get(n));
               else sb.append('#');
           }
       }
       
       return sb.toString();
    }
}
