Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.


===================================================================================================================================================




class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        int[][] vis = new int[n][m];
        int[][] temp = new int[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i == 0 || i == n-1 || j == 0 || j == m-1 ){
                    if(a[i][j] == 'O' && vis[i][j] == 0){
                        temp[i][j] = 1;
                        dfs(i,j,vis,a,n,m,temp);
                    }
                }
               
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(a[i][j] == 'O' && temp[i][j] == 0) a[i][j] = 'X';
            }
        }
        return a;
        
    }
    
    public static void dfs(int i, int j, int[][] vis, char a[][],int n,int m,int[][] temp){
        if(i<0 || i>=n || j<0 || j>=m || a[i][j] == 'X' || vis[i][j] == 1) return;
        
        vis[i][j] = 1;
        temp[i][j] = 1;
        dfs(i+1,j,vis,a,n,m,temp);
        dfs(i-1,j,vis,a,n,m,temp);
        dfs(i,j+1,vis,a,n,m,temp);
        dfs(i,j-1,vis,a,n,m,temp);

    }
}
