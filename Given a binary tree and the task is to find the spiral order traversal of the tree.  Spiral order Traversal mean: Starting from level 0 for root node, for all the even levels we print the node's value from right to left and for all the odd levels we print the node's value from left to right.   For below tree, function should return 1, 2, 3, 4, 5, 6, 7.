Given a binary tree and the task is to find the spiral order traversal of the tree.

Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels

we print the node's value from right to left and for all the odd levels we print the node's value from left to right. 

For below tree, function should return 1, 2, 3, 4, 5, 6, 7.



=====================================================================================================================
class Spiral
{
    static ArrayList<ArrayList<Node>> levelOrder(Node node) 
    {
        ArrayList<Node> a=new ArrayList<>();
        ArrayList<ArrayList<Node>> c=new ArrayList<>();
        Queue<Node> b=new LinkedList<>();
        b.add(node);
        a.add(node);
        while(!b.isEmpty())
        {
            Node x=b.poll();
            if(a.size()!=0)
            if(x==a.get(0))
            {
                c.add(a);
                a=new ArrayList<>();
            }
            if(x.left!=null)
            {
            b.add(x.left);
            a.add(x.left);
            }
            if(x.right!=null)
            {
            b.add(x.right);
            a.add(x.right);
            }
        }
        return c;
        // Your code here
    }
    //Function to return a list containing the level order 
    //traversal in spiral form.
    ArrayList<Integer> findSpiral(Node root) 
    {
        ArrayList<Integer> a=new ArrayList<>();
        if(root==null)
        return a;
    ArrayList<ArrayList<Node>> c=new ArrayList<>();
    c=levelOrder(root);
    int x=c.size(),y;
    //System.out.println(c);
    for(int i=0;i<x;i++)
    {
        y=c.get(i).size()-1;
        if(i%2!=0)
        {
            for(Node z: c.get(i))
            a.add(z.data);
        }
        else
        {
            for(int z=y;z>=0;z--)
            a.add(c.get(i).get(z).data);
        }
    }
    return a;
        // Your code here
    }
}
