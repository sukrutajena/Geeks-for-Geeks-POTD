Given an array A[] consisting of 0’s and 1’s. A flip operation is one in which you turn 1 into 0 and a 0 into 1.
You have to do at most one “Flip” operation of any subarray. Formally, select a range (l, r) in the array A[], such 
that (0 ≤ l ≤ r < n) holds and flip the elements in this 
range to get the maximum ones in the final array. You can possibly make zero operations to get the answer.

======================================================================================================================

class Solution {

    public static int maxOnes(int a[], int n) {
        // Your code goes here
        int maxCount=0;
        int count = 0;
        int countOne = 0;
        for(int i=0;i<n;i++){
            if(a[i]==1){
                countOne++; //count number of 1's
            }
            if(a[i]==0){ 
                count++; //count of flips required
            }else{
                count--; //if element is 1 then it should be zero and not to be counted in the flip's count or in the result
            }
            if(count>0 && count > maxCount){
                maxCount = count;//update if count is maximum
            }else if(count<0){
                count = 0;// if negative count then discard
            }
        }
        return maxCount + countOne;
    }
}
